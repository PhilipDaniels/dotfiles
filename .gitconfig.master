# -*- mode: conf -*-
# vim: set filetype=gitconfig:

[user]
    name = Philip Daniels
    email = Philip.Daniels1971@gmail.com
[color]
    ui = true
[credential]
    # Store passwords in RAM for 6 days (6 * 24 * 60 * 60).
    helper = cache --timeout=518400
[core]
    # When running from a non-internal shell,
    # If server is     and client is          Then...
    # 1) emacs-w32     emacsclient-w32        The existing GUI window is reused
    # 2) emacs-w32     emacsclient-w32 --tty  Emacs opens in the current console
    # 3) emacs-w32     emacsclient-w32 -c     Emacs opens a new GUI window, but also brings the existing window forward and focuses it, which is annoying
    # 4) emacs-w32     emacsclient            Behaves as per 1)
    # 5) emacs-w32     emacsclient --tty      Behaves as per 2)
    # 6) emacs-w32     emacsclient -c         Behaves as per 2)
    #
    # When running from an ansi-term shell,
    # If server is     and client is          Then...
    # 1) emacs-w32     emacsclient-w32        A GUI buffer is opened in the window that contains ansi-term, behaviour is good, except for annoying "waiting for Emacs" prompt from Git.
    # 2) emacs-w32     emacsclient-w32 --tty  A console Emacs buffer is opened, running under ansi-term. Very confusing, colors are wrong.
    # 3) emacs-w32     emacsclient-w32 -c     A new GUI window pops up, behaviour is good, but ansi-term seems to get a bit confused by cursor position.
    # 4) emacs-w32     emacsclient            Behaves as per 1)
    # 5) emacs-w32     emacsclient --tty      Behaves as per 2)
    # 6) emacs-w32     emacsclient -c         Behaves as per 1)
    editor = emacsclient -q -t
    pager = less -x4
    # Do not do any conversion. Always keep whatever the file was entered with.
    # This seems to be best for files that you need to use on different systems
    # (Linux, MSysGit, Cygwin). It requires Windows machines to know
    # about and preserve files with LF endings, which most modern tools do.
    # See http://stackoverflow.com/questions/170961 and 13960696
    # In practice THIS SHOULD BE IGNORED because you should create a
    # .gitattributes file in every repo. See my question & answer at
    # http://stackoverflow.com/questions/24577629/git-line-endings-after-normalization
    autocrlf = false
    # Stop git whining about CRLF/LF conversions on Windows.
    safecrlf = false
[push]
    default = simple
[http]
    # See also functions f_GitSetProxy and f_GitUnsetProxy and the call of the former
    # from .bashrc. Reading is http://rdproxy01:800 and Exeter is http://exproxy03:8080
    # The new proxy is http://fpproxy.corp.edrlandmark.net:8080
    proxy = http://fpproxy.corp.edrlandmark.net:8080
[https]
    proxy = http://fpproxy.corp.edrlandmark.net:8080
[alias]
    s = status
    ss = status --short
    m = commit -m
    aamend = commit -a --amend --no-edit
    amend = commit --amend --no-edit
    a = add -A
    b = branch -a -vv
    c = diff --check
    cc = diff --check --cached
    co = checkout
    cob = checkout -b
    cod = checkout develop
    com = checkout master
    fmoff = config core.fileMode 0
    fmon = config core.fileMode 1
    rod = rebase -i origin/develop
    # Do a git add followed by a git status. This is the syntax to define ashell function,
    # which can be used to execute arbitrary commands.
    as = "'!f() { git add .; git status; }; f'"
    # Delete a branch locally and on the remote. See
    # http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely
    rmbranch = "!f(){ git branch -d ${1} && git push origin --delete ${1}; };f"
    # See which commits are in one but not the other. Uses < and > markers to indicate left and right.
    compare = log --left-right --graph --cherry-pick --oneline

    # The color names correspond to those in the palette. (Idx = logical color
    # name). Note that the actual color may be nothing like "red" or "green",
    # it depends on the terminal palette.
    #     0 = black, 1 = red, 2 = green, 3 = yellow,
    #     4 = blue,  5 = magenta, 6 = cyan, 7 = white
    # Prefixing with bold adds 8 to all the colour indexes (i.e. now 8..15)
    # and selects the "bright" aka "bold" variants. There is also the "normal"
    # colour which is whatever the foreground is. You may also use the
    # modifiers bold, dim, ul, blink and reverse. If two colours are given the
    # first is the foreground and the second is the background.
    l = log -20 --graph --all --abbrev-commit --pretty=format:'%C(yellow)%h%C(bold red) %ci%x08%x08%x08%x08%x08%x08%x08%x08%x08%C(white)%d%C(reset) %s %C(blue)%ae'

    # An example of how to setup aliases for git subtree pull and push commands.
    # See my answer at http://stackoverflow.com/questions/24038147/managing-third-party-assets/
    # mupull = subtree pull --prefix MiscUtils --squash git@github.com:PhilipDaniels/MiscUtils.git master
    # mupush = subtree push --prefix MiscUtils git@github.com:PhilipDaniels/MiscUtils.git master

# Setup the GUI diff and mergetools. You can pick which one by uncommenting
# the relevant lines.
[merge]
    conflictstyle = diff3
    tool = kdiff3
[mergetool]
    prompt = false
    keepBackup = false
[diff]
    guitool = kdiff3
    tool = kdiff3
[difftool]
    prompt = false

[mergetool "p4merge"]
    cmd = "p4merge $BASE $LOCAL $REMOTE $MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false
[mergetool "tortoisemerge"]
    cmd = \""c:/Program Files/TortoiseGIT/bin/TortoiseGitMerge.exe"\" -base "$BASE" -theirs "$REMOTE" -mine "$LOCAL" -merged "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false
[mergetool "kdiff3"]
    cmd = \""C:/Program Files/KDiff3/kdiff3"\" $BASE $LOCAL $REMOTE -o $MERGED
[mergetool "vs2015"]
    cmd = \""C:/Program Files (x86)/Microsoft Visual Studio 14.0/Common7/IDE/vsdiffmerge.exe"\" "$REMOTE" "$LOCAL" "$BASE" "$MERGED" //m
    keepbackup = false
    trustexistcode = true

[difftool "p4merge"]
    cmd = "p4merge $LOCAL $REMOTE"
[difftool "tortoisediff"]
    cmd = \""c:/Program Files/TortoiseGIT/bin/TortoiseGitMerge.exe"\" -mine "$REMOTE" -base "$LOCAL"
[difftool "kdiff3"]
    cmd = \""C:/Program Files/KDiff3/kdiff3"\" $LOCAL $REMOTE
[difftool "vs2015"]
    cmd = \""C:/Program Files (x86)/Microsoft Visual Studio 14.0/Common7/IDE/vsdiffmerge.exe\"" "$LOCAL" "$REMOTE" //t
    keepbackup = false
    trustexistcode = true

