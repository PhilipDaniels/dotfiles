function! StripString(input_string)
    " Remove leading and trailing whitespace from input_string.
    return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

function! RunMacroToBlankLine(registerName)
    " Repeatedly run the macro stored in the registerName until the
    " end of file or a blank line is reached. For this to work as you
    " expect your macro should move down one line as part of its
    " definition (typically it is the last thing it does).
    let curLine = line(".")
    let lastLine = line("$")
    for line in getline(curLine, lastLine)
        let sLine = StripString(line)
        if (strlen(sLine) == 0)
            break
        endif
        let cmd = '@' . a:registerName
        execute "normal " . cmd
    endfor
endfunction

function! FileSizeForStatusLine()
    " Return file size in a format suitable for the status line.
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    else
        return (bytes / 1024) . "K"
    endif
endfunction


" PD: Currently unused. There is a direct key mapping on F12 instead
" which seems to get the job done.
set path=.,,..,../..,./*,./*/*,../*,~/,~/**,/usr/include/*
function! Mosh_Flip_Ext()
    " Switch editing between .c* and .h* files (and more).
    " Since .h file can be in a different dir, call find.
    if match(expand("%"),'\.c') > 0
        let s:flipname = substitute(expand("%"),'\.c\(.*\)','.h\1',"")
        exe ":find " s:flipname
    elseif match(expand("%"),"\\.h") > 0
        let s:flipname = substitute(expand("%"),'\.h\(.*\)','.c\1',"")
        exe ":sp " s:flipname
    endif
endfun


