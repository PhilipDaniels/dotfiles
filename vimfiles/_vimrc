" To reload this file while editing it, use :so %   (source current file)

set nocompatible    " Don't care about being compatible with vi.
set number          " Turn on line numbers
set vb t_vb=        " Turn off bleeping and flashing

" Ensure tabs are always 4 spaces.
set tabstop=4
set shiftwidth=4
set expandtab

" Turn off backups
set nobackup
set nowb
set noswapfile

" Set a status line.
set noruler
set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%{FileSizeForStatusLine()}\,  " file size
set statusline+=%L\ Lines\ 
set statusline+=%h%m%r%w                     " flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]\             " file format
set statusline+=%=                           " right align
"set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
set statusline+=%b,0x%-8B\                   " current char
set statusline+=L%l,C%c\ [%P]
"set titlestring=%f\ %{FileSizeForStatusLine()}

" Turn on syntax highlighting and indentation based on filetype.
syntax on
filetype plugin indent on

" Turn on the solarized theme. This "just works" for gVims, but for
" console Vims you should set your terminal's theme to solarized too.
"
" Env                    Notes
" =====================  =====
" ConEmu-MSysGit         No colors, everything looks grey.
" ConEmu-Cygwin Git      Looks ok, but some colors swapped compared to gVim.
" ConEmu SSH-condolr     Looks like Cygwin vim
" ConEmu-Win native vim  Perfect, looks just like Windows gVim
" Win gVim               Perfect
" XWin gVim              Perfect
" Linux console          ?
" terminator             ?

" This preps solarized to run in dark mode.
set background=dark

" Without this, links in the built-in help are illegible blue blocks.
let g:solarized_underline=0

" Calling the color theme sets colors not just for code syntax but
" for many other things such as cursors and status lines...
colors solarized

" ...so if you want to override them you have to do it after the color
" theme is installed. "hi visual" determines how text is highlighted
" in visual mode, it is difficult to see in console Vim without this.
" The operative terms are ctermbg and ctermfg, the numbers after them
" are color palette indexes (they exactly correspond to what you can
" see in ConEmu's colors dialog page). Do ":verbose hi visual" to
" determine where this is set. See ":help highlight" for details on how
" to set highlights and ":help highlight-groups" for a list of the
" things that you can highlight.
highlight Visual term=reverse cterm=reverse ctermbg=13 ctermfg=15 guibg=DarkGrey
highlight StatusLine ctermbg=4 ctermfg=15
highlight StatusLineNC ctermbg=14 ctermfg=0

" The first line turns on highlighting of the current line, but the second
" line then cancels the highlighting effect by setting it to none. The third
" line highlights the line number in the gutter column at the left; it needs
" the first line to work!
set cursorline
highlight CursorLine ctermbg=none
highlight CursorLineNr term=bold ctermfg=4 gui=bold guifg=Yellow

" You can also highlight the current column in the same way.
"set cursorcolumn

" Allow quick toggle between light and dark solarized.
call togglebg#map("<F12>")
 

" Turn on automatic indentation. The Wiki says only do this manually if
" filetype indentation is not working.
"set smartindent

" Backspace and cursor keys wrap to previous/next line and make
" Backspace work correctly.
set backspace=indent,eol,start whichwrap+=<,>,[,]

" Backspace in Visual mode deletes selection
vnoremap <BS> d

" Buffer and tab navigation.
map <silent> <C-Tab> :bnext<CR>
map <silent> <C-S-Tab> :bprevious<CR>
map <silent> <C-J> :bnext<CR>
map <silent> <C-K> :bprev<CR>
map <silent> <C-L> :tabn<CR>
map <silent> <C-H> :tabp<CR>

" Make F2 and F3 run the macros stored in the 'q' and 'w' registers
" and Shift F2/F3 run the macros until a blank line is encountered.
map <F2> @q
map <F3> @w
map <silent> <S-F2> :call RunMacroToBlankLine('q')<CR>
map <silent> <S-F3> :call RunMacroToBlankLine('w')<CR>

" Window resizing on function keys, +/- and the numeric keypad.
map <F5> <C-W><
map <F6> <C-W>>
map <F7> <C-W>-
map <F8> <C-W>+

nnoremap <silent> _ :resize -1<CR>
nnoremap <silent> + :resize +1<CR>

" Quick access to NERDTree.
map <C-n> :NERDTreeToggle<CR>

" ********** Function Definitions **********
function! StripString(input_string)
    " Remove leading and trailing whitespace from input_string.
    return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

function! RunMacroToBlankLine(registerName)
    " Repeatedly run the macro stored in the registerName until the
    " end of file or a blank line is reached. For this to work as you
    " expect your macro should move down one line as part of its
    " definition (typically it is the last thing it does).
    let curLine = line(".")
    let lastLine = line("$")
    for line in getline(curLine, lastLine)
        let sLine = StripString(line)
        if (strlen(sLine) == 0)
            break
        endif
        let cmd = '@' . a:registerName
        execute "normal " . cmd
    endfor
endfunction

function! FileSizeForStatusLine()
    " Return file size in a format suitable for the status line.
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    else
        return (bytes / 1024) . "K"
    endif
endfunction

