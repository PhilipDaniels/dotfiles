# vim: set filetype=sh:

# Configure the prompt. This relies on the codes in the .bash_controlcodes script.

f_GetGitInfo()
{
    local gitsym=`git symbolic-ref HEAD`

    # if "fatal: Not a git repo .., then exit
    case "$gitsym" in
        fatal*) GitInfo[IsGitDir]=0; exit 0 ;;
        *) GitInfo[IsGitDir]=1 ;;
    esac

    # the current branch is the tail end of the symbolic reference
#   branch="${gitsym##refs/heads/}"    # get the basename after "refs/heads/"

    GitInfo[Branch]="master"
}

f_MainPrompt()
{
    # Declare an associative array to hold the things
    # that we want to work out.
    declare -A GitInfo
    GitInfo[IsGitDir]=0
    GitInfo[Branch]=""
    GitInfo[StagedCount]=0

    # Call other function to fill in the info.
    f_GetGitInfo

    # Now display it.
    #echo "${animals["moo"]}"
    for info in "${!GitInfo[@]}"; do
        echo "$info = ${GitInfo["$info"]}";
    done
}

function f_SetPrompt()
{
    unset PS1

    # Indicate if root, white text on red background.
    if [ "$ISROOT" == "1" ]; then
        ROOTINDICATOR=", \[${FC[1]}\]root\[${FC[6]}\]"
    fi  

    # Indicate if in a screen session.
    # n.b. Cygwin has an old version of bash (pre 4.2) which does not understand
    # the \uFFFF syntax, so you have to use the hexadecimal escape syntax, \xFF
    # for each byte in the character. Use 'echo <uchars> | hexdump -C' in a
    # Unicode terminal to see the bytes you need.
    if [ ! -z $STY ]; then
        SCREEN="\[${FC[13]}\][SCR]\[$R_All\] "
    fi

    # User@hostname (OS, ROOTINDICATOR)
    PS1="${SCREEN}\[${FC[6]}\]\u@\h (${OS}${ROOTINDICATOR})\[$R_All\]"

    # Current directory.
    PS1="${PS1} \[${FC[2]}\]\w\[$R_All\]"

    # Final sequence.
    PS1="$PS1\n\$ "
   
    # If this is an xterm set the title to user@host:dir
    case $TERM in
    xterm*|rxvt*)
        local TITLEBAR='\[\033]0;\u@\h:\w\007\]'
        ;;
    *)
        local TITLEBAR=""
        ;;
    esac

    PS1="${TITLEBAR}${PS1}"
}

f_SetPrompt

